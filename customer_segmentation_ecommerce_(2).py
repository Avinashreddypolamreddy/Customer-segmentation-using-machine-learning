# -*- coding: utf-8 -*-
"""customer_segmentation_ecommerce (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ql4oa3GjHZerizAyDsxJGJv5cQwVVZND
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

df = pd.read_csv('/bin/Customers.csv')

df

df.info()
print("\n\n\n NO missing values")

df['Gender'] = pd.get_dummies(df['Gender'],drop_first=True)

# Convert boolean columns to integers (1 and 0)
df['Gender']=df['Gender'].astype(int)

#one hot encodig successfull as we can see in the dtype
df.info()

"""## **Insights from the Data**"""

#lets see the plots between different columns of the dataset
sns.pairplot(df)

sns.heatmap(df.corr(),annot=True)

#outliers  0 = Female , 1= Male
sns.boxplot(x='Gender',y='Age',data=df);

sns.scatterplot(data=df,x='Age',y='Spending Score (1-100)',hue='Gender')
plt.title("Blue is female and orange is Male")
plt.show()

Gen =df.groupby('Gender')

print("\t\t\t0 is female and 1 is male")
Gen.mean()

#max and min
print(Gen.max())
print('\n\n')
print(Gen.min())

"""# KNN Algorithm"""

X= df.iloc[:, [3,4]].values

wcss = []

for i in range(1,11):
    km = KMeans(n_clusters=i)
    km.fit_predict(X)
    wcss.append(km.inertia_)

plt.plot(range(1, 11), wcss, marker='o')
plt.title('The Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

km = KMeans(n_clusters=5)
y_means = km.fit_predict(X)

plt.scatter(X[y_means == 0,0],X[y_means == 0,1],color='blue')
plt.scatter(X[y_means == 1,0],X[y_means == 1,1],color='red')
plt.scatter(X[y_means == 2,0],X[y_means == 2,1],color='green')
plt.scatter(X[y_means == 3,0],X[y_means == 3,1],color='yellow')
plt.scatter(X[y_means == 4,0],X[y_means == 4,1],color='black')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

model=KMeans(n_clusters=5)
model.fit(df)
pre=model.predict(df)

df["Target"]=y_means

df=df
df.head()

X=df.iloc[:,1:5]
y=df.iloc[:,-1]

X.head()

y.head()

#splitting the dataset
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

error_rate=[]

for i in range(1,40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i = knn.predict(X_test)
    error_rate.append(np.mean(pred_i!=y_test))

plt.figure(figsize=(10,5))
plt.plot(range(1,40),error_rate,color='blue',linestyle='dashed',marker='o',markersize=12)
plt.title("Error rate vs k value")
plt.xlabel("k")
plt.ylabel("Error_rate")
plt.show()

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Making predictions on the test set
y_pred_knn = knn_model.predict(X_test)

# Evaluating the KNN model using precision, recall, and F1-score
precision_knn = precision_score(y_test, y_pred_knn, average='weighted')
recall_knn = recall_score(y_test, y_pred_knn, average='weighted')
f1_knn = f1_score(y_test, y_pred_knn, average='weighted')

# Displaying the precision, recall, and F1-score for KNN
print(f"KNN Precision: {precision_knn}")
print(f"KNN Recall: {recall_knn}")
print(f"KNN F1-Score: {f1_knn}")

# Generate predictions using the KNN model
y_pred_knn = knn_model.predict(X_test)

# Confusion matrix for KNN
knn_cm = confusion_matrix(y_test, y_pred_knn)

# Dynamically get the unique labels from the test set (y_test)
labels = sorted(set(y_test))

# Display confusion matrix for KNN
disp_knn = ConfusionMatrixDisplay(confusion_matrix=knn_cm, display_labels=labels)
disp_knn.plot()
plt.title('Confusion Matrix for K-Nearest Neighbors')
plt.show()

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initializing and training the Logistic Regression model
log_model = LogisticRegression()
log_model.fit(X_train, y_train)

# Making predictions on the test set
y_pred = log_model.predict(X_test)

# Evaluating the model using precision, recall, and F1-score
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

# Displaying the precision, recall, and F1-score
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-Score: {f1}")

# Generate the confusion matrix
log_cm = confusion_matrix(y_test, y_pred)

# Dynamically get the unique labels from the test set
labels = sorted(set(y_test))

# Display the confusion matrix for the Logistic Regression model
disp_log = ConfusionMatrixDisplay(confusion_matrix=log_cm, display_labels=labels)
disp_log.plot()
plt.title('Confusion Matrix for Logistic Regression')
plt.show()

# Performance metrics for both models
metrics = ['Precision', 'Recall', 'F1-Score']
logistic_scores = [precision, recall, f1]
knn_scores = [precision_knn, recall_knn, f1_knn]

# Create a bar plot to compare the performance of Logistic Regression and KNN
x = range(len(metrics))
width = 0.3

plt.bar(x, logistic_scores, width=width, label='Logistic Regression', align='center')
plt.bar([p + width for p in x], knn_scores, width=width, label='KNN', align='center')

# Adding labels and title
plt.xlabel('Metrics')
plt.ylabel('Scores')
plt.title('Comparison of Logistic Regression and KNN Performance')
plt.xticks([p + width/2 for p in x], metrics)
plt.legend()

# Display the plot
plt.show()